don't forget @csrf
__________________
use @isset()
__________________
use $department->name ?? old('name') in the form input
__________________
use $errors->has('name') in the class attributes
__________________
use @error('name') @enderror
__________________
use the @include() to include blade pages .
__________________
use the @apply with TailwindCss : used to apply a set of CSS styles defined in a utility class to a specific HTML element.
__________________
when create|edit an Employee : we need to pass the "$departments" to to the form , so we can use it in select
we can pass it , using the  $departments = department::all() in the Controller .

// in employee Controller
public function edit(Employee $employee)
    {
        $departments = new DepartmentCollection(Department::all());
        return view('employees.edit' , compact('employee' , 'departments'));
    }

// in resources.view.employees.edit
@section('content')
    @include('employees.includes.form' , ['employee' => $employee , 'departments' => $departments  ])
@endsection
__________________

# in the Form Select

the Wrong is :

    <div>
        <label for="department_id">Department</label>
        <select name="department_id" id="department_id"
        @class(['border-red-500' => $errors->has('department_id')])
        value="{{ $employee->department->id ?? old() }}"
        data-te-select-init data-te-select-filter="true"
        >
            @forelse ($departments as $department)
                <option value="{{ $department->id }}">{{ $department->name }}</option>
            @empty
                <option value="" disabled> there are no departments</option>
            @endforelse
        </select>
    </div>

The Rigth is :

     <div>
        <label for="department_id">Department</label>
        <select name="department_id" id="department_id"
            @class(['border-red-500' => $errors->has('department_id')])
            value="{{ $employee->department->id ?? old() }}"
            data-te-select-init data-te-select-filter="true"
        >
                <option value="">Select a Department</option>
            @forelse ($departments as $department)
                <option value="{{ $department->id }}"   // take care here to understand the case
                    @isset($employee)

                        @if($employee && $employee->department->id == $department->id )
                            selected
                        @elseif( $department->id == old('department_id'))
                            selected
                        @endif

                    @endisset
                >
                {{ $department->name }}
                </option>
            @empty
                <option value="" disabled> there are no departments</option>
            @endforelse
        </select>
    </div>
__________________

# for the search

\App\Models\Department::where('name' , 'LIKE' , '%qui%')->get();

# in the Models Department.php , a new function scopeName() using the Eloquent query Builder , so .

public function scopeName(Builder $query , string name) : Builder {
    return $query->where('name' , 'LIKE' , '%'.name.'%' );
}

# we can use php artisan tinker

# Tinker :
    php artisan tinker provides an interactive command-line interface to interact with your Laravel application and its components,
    allowing you to experiment, test code, and interactively query your application's features using PHP.

# we can use ->tosql()

__________________

when build the searh in the employee.index.blade.php , I get an error ,
the form doesn't send any variables ,

    so , don't forget the name="" when write the form input . ðŸ˜… , and use dd() always ðŸ˜‚

# before

    <form action="{{ route('employee.index') }}"
        method="GET"
    >
        @csrf
        <input type="text" placeholder="Search Employee by names"
            value="{{ request('name') }}" class="mb-4">
        <button type="submit" class="btn">Search</button>
        <a href="{{ route('employee.index') }}" class="btn">Clear</a>
    </form>

# After


    <form action="{{ route('employee.index') }}"
        method="GET"
    >
        @csrf
        <input type="text" placeholder="Search Employee by names" name="name" // don't forget the name=""
            value="{{ request('name') }}" class="mb-4">
        <button type="submit" class="btn">Search</button>
        <a href="{{ route('employee.index') }}" class="btn">Clear</a>
    </form>

__________________

# Search

we need Request $request in the Controller ,
$request->input('name')

we need to search for this name in the tables

we create a scopeName(Builder $query , string $name) to return a query and the string to search , the function format
return $query->where('name' , 'LIKE' , '%' . $name . '%' )

then we can use the function in the Controller , under name "name()"

$name = $request->input('name') // get the string from the Form
$employees = new EmployeeCollection( Employee::when( $name , fn( $query , $name) => $query->name($name) )) // to match the resulst
__________________

for Implement User Authentication :
User Authentication (Optional)
Implement basic user authentication to restrict access to the CRUD operations.
Provide a simple login mechanism.

> composer require Laravel/ui
> php artisan ui bootstrap --auth
> npm install  && npm run dev

# after that, we need to put the middleware for the routes ,

# we have these routes :

Route::get('/', function () {
    return redirect()->route('department.index');
});
Route::resource('department', DepartmentController::class);
Route::resource('employee', EmployeeController::class);

# we can Implement the "auth" middleware :

    public function __construct( )
    {
        $this->middleware(['auth']);

    }
in the two Controllers
__________________

# git tips

git remote add origin <url_to_gitlab_project>

# and we want to edit it from "origin" to "gitlab"

git remote rename origin gitlab

# we want to remove one of the remotes

git remote remove remote_name.
